#+title: Nots

* arithmetic

** division

there is two forms of division in elm

1. "/" for floating point
2. "//" for integer


** infix vs prefix style

*** infix style

more traditional placing the operator in between the numerical arguments


#+begin_src elm
1 + 2
3 : number

42 * 10
420 : number
#+end_src

*** prefix style

more functional placing the operator in front of the numerical arguments

#+begin_src elm
(+) 1 2
3 : number

(*) 42 10
420 : number
#+end_src

** Operator precedence

Several operators can be used in a single line.

#+begin_src elm
42 * 200 - 8000
400

(42 * 200) - 8000
400

42 * (200 - 8000)
-327600
#+end_src

we can use parentheses to change the order operaters are applied * has a higher precedence than -. So if we want the - to be apllied first, then we must apply parentheses around its arguments.

Elm assigns numeric precedence values to operators, with 0 being the lowest precedence and 9 being the hightest. higher precedence number is applide first


*** associativity

associativity determines if an expression with multiple ooperators is evaluated from left to right or right to left

elm names are left-associative and right-associative

+, -, *, / are all left-associative

and ^ is right-associative

#+begin_src elm
2 ^ 3 ^ 2
512

(2 ^ 3) ^ 2
64
#+end_src


+------------+------------+--------------+
| Operators  | Precedence | Associativity|
+------------+------------+--------------+
|>>          |9           |left          |
+------------+------------+--------------+
|<<          |9           |right         |
+------------+------------+--------------+
|^           |8           |right         |
+------------+------------+--------------+
|* / // % rem|7           |left          |  
+------------+------------+--------------+
|+ -         |6           |left          |
+------------+------------+--------------+
|++ ::       |5           |right         |
+------------+------------+--------------+
|== /= < > <=|4           |none          |
+------------+------------+--------------+
|&&          |3           |right         |
+------------+------------+--------------+
|||          |2           |right         |
+------------+------------+--------------+
||>          |0           |left          |
+------------+------------+--------------+


* booleans

  Preforming operations from Boolean algebra is also quite straightforward in ELm

 #+begin_src elm
|| - or
&& - and
not - negation
xor - exclusive
#+end_src

elm dose not consider the number 0 or null as a synonymous with false nor non-zero to be true it must be exact
** 
        +------------+------------+
        | Operator   | Meaning    |
        +------------+------------+
        | ==         | Equal      |
        +------------+------------+
        | /=         | Not Equal  |
        +------------+------------+
        | >          | greater    |
        +------------+------------+
        | <          | less than  |
        +------------+------------+
        | <= >=      | or equal   |
        +------------+------------+
        | max        | large of 2 |
        +------------+------------+
        | min        | small of 2 |
        +------------+------------+

        
*** comments


  single Line comments are done with "--"

  Multi-line Comments start with "{-" and end with "-}"

        
**** tips
        to toggle a comment you can use an extra "-" and then add in a "}" to closes it

        {--
        some code
        
        --}


        {--}
        some code
        --}

* expression

elm treights anything that evaluates to a value is an expression

so not just expressions like

#+begin_src elm
1 + 2
3
#+end_src



but also 

#+begin_src elm
5
5 : number

#+end_src
because 5 already has a value of 5 it needs no further evaluation and is there for considered an expression

* Constant

elm lets us name expressions like

#+begin_src elm
x = (4 + 5) / 3
4
#+end_src

we can now always refer to the expression "(4 + 5) / 3" as x

elm gives the name constant to any name the defins an expression

elm also give constants of its own such as pi

remember that everything in elm is an expression
** Naming Constants

   constants should always be named with Camel case

   we are allowed to have numbers in the name

   old elm can have apostrophes but not anymore

   we can have Underscores but it is against convention

   we cannot have spacial characters
   
* If Expresssions

if has 3 parts in elm

1) A condition
2) An expression to evaluate if true
3) An expression to evaluate if false

we must always provide an else case

just like everything in elm an if is an expression and returns a value

we can capture that value

#+begin_src elm
whatToDo = if raining then bringUnbrella else leaveUnbrella

whatToDo
bringUnbrella

#+end_src

we can also add more branches with else if

#+begin_src elm
if  somthing then
    doSomthing
   else if somthingElse then
            doTHat
    else
    doNothing

#+end_src

* Functions 
A function is a relationship between a set of inputs to a set of possible outputs where each input is mapped to exactly one output 

#+begin_src elm
escapeEarth myVelocity =
    if myVelocity > 11.186 then
        "godspeed"
    else
        "Come back"


escapeEarth 11.2
"godspeed"
#+end_src
like everything in elm funcons are expression and can be mapped to constants

the first line of a functions defeniton much be indented atleast onec


functions can be passed around just as any value like arguments
** Partial Function Application
       elm lets us partialy assign paramitirs

#+begin_src elm
multiplyByThree = multiply 3
multiplyByThree 4
12
multiplyByThree 5
15
#+end_src
        this lets us set a paramitir then elm will return the function waiting for the next value
** opperators vs functions
        operaters are functions also but differ in 3 main ways

        1. Naming
           operaters cant have letters or numbers in there names jsut how functions cannot have special chars in theres
        2. number of agruments
           operators cant have more than 2 arguments while functions have no limmits
        3. application Style
           oporators are applied by writing the first argument, followed by the operator, follewb by the second argument (infix style)
           normal funcons are apllyed with prefix-style
* Let expressions

let is how we can assin names to values in local scope

* Case Expressions

case expressions let use check meany valuse eficiently

#+begin_src elm
weekday dayInNumber =
    case dayInNumber of
        0 ->
            "sunday"
        1 ->
            "monday"
        2 ->
            "Tuseday"
        3 ->
            "wendnesday"
        4 ->
            "thursday"
        5 ->
            "friday"
        6 ->
            "saturday"
        _ ->
            "unknow Day"
#+end_src

case works by matting a expression to a pattern. when a match is found, it evaluates the expression to the right of -> and returns whatever value is produced

** patern Matching

pattern matching is the act of checking one or more inputs again a pre-defind pattern and seeing if they match

the expression after the keyword case can be anything from a simple value to a complex computation including a function.

for example we can make a case that returns a hastag for each day of the week provied by the weekday function

#+begin_src elm
hastag dayInNumber =
    case weekday dayInNumber of
        "sunday" ->
            "#dayofrest"
        "monday" ->
            "#gloomyMonday"

        ect ...
#+end_src

 elm style guid says that we should be using a new line afte the -> in each case becase of ease of modification in the future


 case should be used with patterns and if is for use with conditions that dont have apattern

* Indentation

elm dose not use syntactic markers such as {  } or (  ) or ; to specify code boundaries. it uses whitespace and indentainos instead

** definitions

*** if expressions
if expressions must be placed inside a function defeniton, otherwise elm with throw an error.

the part after then and final else should be place on the next line indented with four spaces. it's perfectly fin to place an if expression inside a let or case expression as long as they themselves are placed inside of a let or case as long as they them self's are inside a function

*** let expression

the code inside of a let expression should be indented by at leaste one space

*** Basic Indentation Rules

module, import, and top-level function definitions must start at the left most column.
If an expression is split into multiple lines, the code that is part of that expression must be indented under that expression with at least one space.
Parts of the expression that are grouped together should be indented with equal number of spaces. This rule is particularly important in the let area.
* Strings

 in elm, Strings are represnted with double quotes

#+begin_src elm
"pretzels"
#+end_src

and Characters are represented with single quotes:

#+begin_src elm
'p'
#+end_src

Character literals must contain exactly one character. Therefore, these expressions are not allowed in elm

#+begin_src  elm
'abc' ,  ''
#+end_src

** Multiline Strings

Multi-line strings are created using """.

#+begin_src  elm
"""
    It became very clear to me sitting out there today
    that every decision I've made in my entire life has
    been wrong. My life is the complete "opposite" of
    everything I want it to be. Every instinct I have,
    in every aspect of life, be it something to wear,
    something to eat - it's all been wrong.
"""
#+end_src


\ tells elm that the double quotes after arnt there to end the string

#+begin_src elm
"tyles awsome day out \" so that we can show the thing"
#+end_src


** calculating Length

to calculate a string's lenght, we can use the lenght function from the String module.


#+begin_src elm
String.lenght "Creed bratton"
13
#+end_src

it is a good idea to use the standard library prefix eg String.___ becasue it helps with clashing with functions from other modules but if we wish to use the function without the prefix we can use the exposing keyword

#+begin_src elm
import String exposing (length)

lenght "tyle perry"
#+end_src

but we can get in to trubble fast

#+begin_src elm
import String exposing (lenght)
import List exposing (lenght)

lenght -- what function should it use???
#+end_src

this will throw an error

string also has a function called isEmply that tells us wther a stirng is emply or not

#+begin_src elm
String.isEmply ""
True

String.isEmply "kyle"
False
#+end_src

*** combing Strings

++ operater is used to concatenate two strings

#+begin_src elm
"These pretzels are " ++ "makin' me thirsty!"
"These pretzels are makin' me thirsty!"
#+end_src


but we cant use it combine characters or number these will throw erros

one way to combine chars is to convet them to a string first. we can use the from char functon to do that
#+begin_src elm
(String.fromChar 'p') ++ (String.fromChar 'r')
"pr"
#+end_src

we can also combine two string using the append function.

#+begin_src elm
String.append "Tyler" "perry"
"Tyler perry"
#+end_src


for multiple strings there is a few ways

one way is to use the ++

#+begin_src elm
"Bears. " ++ "Beats. " ++ "Battlestar Gallactica."
"Bears. Beats. Battlestar Gallactica."
#+end_src

Technically speaking, the ++ operator combines only two strings. In our example above, Elm first applies ++ to "Bears. " and "Beats. " resulting in "Bears. Beats. ". It then applies ++ with "Battlestar Gallactica." as a second argument to produce the final string. We can also use append to combine more than two strings. Although it tends to get a bit verbose.

#+begin_src elm
String.append (String.append "Butter shave, " "Voice, ") "Serenity now"
"Butter shave, Voice, Serenity now"
#+end_src

Another way of concatenating multiple string is by using the concat function which requires us to put individual string ino a list

#+begin_src elm
String.concat [ "Bears. ", "Beats. ", "Battlestar Gallactica." ]
"Bears. Beats. Battlestar Gallactica."
#+end_src

Notice how we included the space between words as part of the individual strings themselves. That looks awkward. If we use the join function instead, we don’t have to do that.

#+begin_src elm
String.join " " [ "Bears.", "Beats.", "Battlestar Gallactica." ]
"Bears. Beats. Battlestar Gallactica."
#+end_src


join takes two parameters:

   - A separator that separates individual strings when they all get combined.
   - A list of strings.

The separator can be anything we want.

#+begin_src elm
String.join "/" [ "Bears.", "Beats.", "Battlestar Gallactica." ]
"Bears./Beats./Battlestar Gallactica."

String.join " thatswhatshesaid " [ "Bears.", "Beats.", "Battlestar Gallactica." ]
"Bears. thatswhatshesaid Beats. thatswhatshesaid Battlestar Gallactica."
#+end_src
** Splitting a String
 We can use the split function te break a staring into multiple parts. it's the exact opposite of join.

#+begin_src elm
String.split " " "Bears. Beats. Battlestar Gallactica."
["Bears.","Beats.","Battlestar","Gallactica."]

#+end_src

** Reversing a String

we can reverse a string with the reverse function

#+begin_src elm
String.reverse "red"
"der"

palindrome word = word == String.reverse word -- if the word is the same as it's self reversed return ture
#+end_src


** Filtering a String

the filter function works a little strange is elm

#+begin_src elm
String.filter '-' "222-11-5555"

----------------- TYPE MISMATCH -------------------
The 1st argument to `filter` is not what I expect:

7|   String.filter '-' "222-11-5555"
                   ^^^
This argument is a character of type:

    Char

But `filter` needs the 1st argument to be:

    Char -> Bool

#+end_src

It expects a function that takes a character and returns a boolean.


#+begin_src elm
isValid char = char /= '-'

isValid "-"
False
isValid 2
True
#+end_src


#+begin_src elm
String.filter isValid "222-11-5555"
"222115555"
#+end_src

** Anonymous Function

Sometimes its desirable to inline the functon that determines whether or not a value should be filtered insted of defining it separately

#+begin_src elm
String.filter (\char -> char /= '-') "222-11-5555"
"222115555"
#+end_src

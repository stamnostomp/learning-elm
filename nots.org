#+title: Nots

* arithmetic

** division

there is two forms of division in elm

1. "/" for floating point
2. "//" for integer


** infix vs prefix style

*** infix style

more traditional placing the operator in between the numerical arguments


#+begin_src elm
1 + 2
3 : number

42 * 10
420 : number
#+end_src

*** prefix style

more functional placing the operator in front of the numerical arguments

#+begin_src elm
(+) 1 2
3 : number

(*) 42 10
420 : number
#+end_src

** Operator precedence

Several operators can be used in a single line.

#+begin_src elm
42 * 200 - 8000
400

(42 * 200) - 8000
400

42 * (200 - 8000)
-327600
#+end_src

we can use parentheses to change the order operaters are applied * has a higher precedence than -. So if we want the - to be apllied first, then we must apply parentheses around its arguments.

Elm assigns numeric precedence values to operators, with 0 being the lowest precedence and 9 being the hightest. higher precedence number is applide first


*** associativity

associativity determines if an expression with multiple ooperators is evaluated from left to right or right to left

elm names are left-associative and right-associative

+, -, *, / are all left-associative

and ^ is right-associative

#+begin_src elm
2 ^ 3 ^ 2
512

(2 ^ 3) ^ 2
64
#+end_src


+------------+------------+--------------+
| Operators  | Precedence | Associativity|
+------------+------------+--------------+
|>>          |9           |left          |
+------------+------------+--------------+
|<<          |9           |right         |
+------------+------------+--------------+
|^           |8           |right         |
+------------+------------+--------------+
|* / // % rem|7           |left          |  
+------------+------------+--------------+
|+ -         |6           |left          |
+------------+------------+--------------+
|++ ::       |5           |right         |
+------------+------------+--------------+
|== /= < > <=|4           |none          |
+------------+------------+--------------+
|&&          |3           |right         |
+------------+------------+--------------+
|||          |2           |right         |
+------------+------------+--------------+
||>          |0           |left          |
+------------+------------+--------------+


* booleans

  Preforming operations from Boolean algebra is also quite straightforward in ELm

 #+begin_src elm
|| - or
&& - and
not - negation
xor - exclusive
#+end_src

elm dose not consider the number 0 or null as a synonymous with false nor non-zero to be true it must be exact
** 
        +------------+------------+
        | Operator   | Meaning    |
        +------------+------------+
        | ==         | Equal      |
        +------------+------------+
        | /=         | Not Equal  |
        +------------+------------+
        | >          | greater    |
        +------------+------------+
        | <          | less than  |
        +------------+------------+
        | <= >=      | or equal   |
        +------------+------------+
        | max        | large of 2 |
        +------------+------------+
        | min        | small of 2 |
        +------------+------------+

        
*** comments


  single Line comments are done with "--"

  Multi-line Comments start with "{-" and end with "-}"

        
**** tips
        to toggle a comment you can use an extra "-" and then add in a "}" to closes it

        {--
        some code
        
        --}


        {--}
        some code
        --}

* expression

elm treights anything that evaluates to a value is an expression

so not just expressions like

#+begin_src elm
1 + 2
3
#+end_src



but also 

#+begin_src elm
5
5 : number

#+end_src
because 5 already has a value of 5 it needs no further evaluation and is there for considered an expression

* Constant

elm lets us name expressions like

#+begin_src elm
x = (4 + 5) / 3
4
#+end_src

we can now always refer to the expression "(4 + 5) / 3" as x

elm gives the name constant to any name the defins an expression

elm also give constants of its own such as pi

remember that everything in elm is an expression
** Naming Constants

   constants should always be named with Camel case

   we are allowed to have numbers in the name

   old elm can have apostrophes but not anymore

   we can have Underscores but it is against convention

   we cannot have spacial characters
   
* If Expresssions

if has 3 parts in elm

1) A condition
2) An expression to evaluate if true
3) An expression to evaluate if false

we must always provide an else case

just like everything in elm an if is an expression and returns a value

we can capture that value

#+begin_src elm
whatToDo = if raining then bringUnbrella else leaveUnbrella

whatToDo
bringUnbrella

#+end_src

we can also add more branches with else if

#+begin_src elm
if  somthing then
    doSomthing
   else if somthingElse then
            doTHat
    else
    doNothing

#+end_src

* Functions 
A function is a relationship between a set of inputs to a set of possible outputs where each input is mapped to exactly one output 

#+begin_src elm
escapeEarth myVelocity =
    if myVelocity > 11.186 then
        "godspeed"
    else
        "Come back"


escapeEarth 11.2
"godspeed"
#+end_src
like everything in elm funcons are expression and can be mapped to constants

the first line of a functions defeniton much be indented atleast onec


functions can be passed around just as any value like arguments
** Partial Function Application
       elm lets us partialy assign paramitirs

      #+begin_src elm
     multiplyByThree = multiply 3
     multiplyByThree 4
         12
             multiplyByThree 5
                15

      #+end_src 
        this lets us set a paramitir then elm will return the function waiting for the next value
** opperators vs functions
        operaters are functions also but differ in 3 main ways

        1. Naming
           operaters cant have letters or numbers in there names jsut how functions cannot have special chars in theres
        2. number of agruments
           operators cant have more than 2 arguments while functions have no limmits
        3. application Style
           oporators are applied by writing the first argument, followed by the operator, follewb by the second argument (infix style)
           normal funcons are apllyed with prefix-style
* Let expressions

let is how we can assin names to values in local scope

         

        


